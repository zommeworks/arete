{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currentData","window","AudioContext","webkitAudioContext","context","onError","e","console","log","initData","docID","location","hash","split","$","each","data","list","i","source","target","name","message","displayMessage","displayOnly","hasImage","epd","answerEntity","maxTimeout","match","alert","filename","request","XMLHttpRequest","url","open","responseType","onload","decodeAudioData","response","buffer","send","loadTTS","Baseplate","props","state","duration","currentPlayTime","playStatus","theme","handler","bind","this","setState","id","React","Component","BoxAgent","className","ButtonAgent","setButtonStatus","param","onClick","TextSubtitle","BoxController","setTheme","alignRight","ButtonSmall","clicked","App","initAudio","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8e5b2540.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './App.css';\nimport data from './testscript.json'\nimport $ from 'jquery';\n\n\n/*\n  UI scheme\n\n ┏━━━━ baseplate ━━━━┓\n ┃  ┏━━━━ AudioController ━━━━┓\n ┃  ┃\n ┃  ┗━━━━━━━━┛  ┃\n ┃  ┏━━━━ BoxAgent ━━━━━━━━━━━━━━━━━━━━━┓\n ┃  ┃  ┏━━━━ ButtonAgent ━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  props: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┃  state: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┃  ┏━━━━ TextSubtitle ━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  props: text (string)       ┃  ┃\n ┃  ┃  ┃         playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┃  state: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n ┃\n ┃  ┏━━━━ BoxController ━━━━━━━━━━━━━━━━━━━━━━━━┓\n ┃  ┃  props: theme (light / dark)              ┃\n ┃  ┃         playStatus (0/1/2)                ┃\n ┃  ┃  state: theme (light / dark)              ┃\n ┃  ┃         playStatus (0/1/2)                ┃\n ┃  ┃  ┏━━━━ div.box-bar ━━━━━━━━━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  ┏━━━━ ProgressBar ━━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┃         maxTimeout (int)      ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ div.bar-base ━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┃  ┏━━━━ div.box-buttons ━━━━━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnRewind ━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnPlayPause ━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnSkip ━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnExit ━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n\n props and states\n\n playStatus:\n  0: null,\n  1: audio ready,\n  2: playing,\n  3: audio end\n**/\n\n\n\n/* * * * * * * * * * *\n * global variables  *\n * * * * * * * * * * */\n\nconst currentData = {};\nconst nextData = {};\nvar ttsBuffer = null;\n// webAudioAPI Fix up prefixing\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\nvar context = new AudioContext();\n\n\n\n/* * * * * * * * * * * * *\n * webAudioAPI functions *\n * * * * * * * * * * * * */\n\nfunction initAudio() {\n  try {\n    // Fix up for prefixing\n    window.AudioContext = window.AudioContext||window.webkitAudioContext;\n    context = new AudioContext();\n  }\n  catch(e) {\n    alert('Web Audio API is not supported in this browser');\n  }\n}\n\nfunction loadTTS(filename) {\n  var request = new XMLHttpRequest();\n  var url = '../src/tts/'+filename+'.mp3';\n  request.open('GET', url, true);\n  request.responseType = 'arraybuffer';\n  // Decode asynchronously\n  request.onload = function() {\n    context.decodeAudioData(request.response, function(buffer) {\n      ttsBuffer = buffer;\n    }, onError);\n  }\n  request.send();\n}\n\nfunction onError(e) {\n  console.log(\"error loading an audio file.\", e);\n}\n\nfunction playSound(buffer) {\n  var source = context.createBufferSource(); // creates a sound source\n  source.buffer = buffer;                    // tell the source which sound to play\n  source.connect(context.destination);       // connect the source to the context's destination (the speakers)\n  source.start(0);                           // play the source now\n                                             // note: on older systems, may have to use deprecated noteOn(time);\n}\n\n\n/* execution */\n\n//functions\nfunction initData(){\n  try {\n    let docID = window.location.hash.split('#');\n    $.each(data.list, function(i){\n      if(data.list[i].name === docID[1]){\n        overwriteData(data.list[i], currentData);\n        if(data.list[i].name.match(/(prompt|statement)/)) {\n        }\n      }\n    });\n  }\n  catch(e) {\n    alert('failed to load data');\n  }\n  loadTTS(currentData.name);\n}\nfunction overwriteData(source, target) {\n  target.name = source.name;\n  target.message = source.message;\n  target.displayMessage = source.displayMessage;\n  target.displayOnly = source.displayOnly;\n  target.hasImage = source.hasImage;\n  target.epd = source.epd;\n  target.answerEntity = source.answerEntity;\n  target.maxTimeout = source.maxTimeout;\n  //target.duration = source.duration;\n}\n\nclass Baseplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      message: '',\n      displayMessage: '',\n      displayOnly: 0,\n      hasImage: 0,\n      epd: 0,\n      answerEntity: '',\n      maxTimeout: 0,\n      duration: 0,\n      currentPlayTime: 0,\n      playStatus: 0,\n      theme: 'light'\n    }\n    this.handler = this.handler.bind(this);\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      name: props.name,\n      message: props.message,\n      displayMessage: props.displayMessage,\n      displayOnly: props.displayOnly,\n      hasImage: props.hasImage,\n      epd: props.epd,\n      answerEntity: props.answerEntity,\n      maxTimeout: props.maxTimeout,\n    };\n  }\n  handler() {\n    if(this.state.playStatus === 2) {\n      this.setState({\n        playStatus: 3,\n        theme: 'light'\n      });\n    }\n    else {\n      this.setState({\n        playStatus: 2,\n        theme: 'dark'\n      });\n    }\n  }\n  render() {\n    return(\n      <div id=\"baseplate\">\n        <BoxAgent\n          playStatus={this.state.playStatus}\n          theme={this.state.theme}\n          displayMessage={this.state.displayMessage}\n          handler={this.handler}\n        />\n        <BoxController\n          theme={this.state.theme}\n          handler={this.handler}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n\n/* * * * * * * * * * * * *\n * BoxAgent and children *\n * * * * * * * * * * * * */\n\nclass BoxAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 0,\n      theme: 'light',\n      displayMessage: \"dummy text\"\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      playStatus: props.playStatus,\n      theme: props.theme,\n      displayMessage: props.displayMessage\n    };\n  }\n  render() {\n    return(\n      <div className=\"box-agent\">\n        <ButtonAgent\n          playStatus={this.state.playStatus}\n          handler={this.props.handler}\n        />\n        <TextSubtitle theme={this.state.theme} displayMessage={this.state.displayMessage}/>\n      </div>\n    );\n  }\n}\n\nclass ButtonAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 0,\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      playStatus: props.playStatus\n    };\n  }\n  setButtonStatus = (param) => {\n    switch(param) {\n      case 0: //audio is not loaded\n        return 'idle';\n      case 1: //audio is ready\n        return 'idle';\n      case 2: //audio is playing\n        return 'listening';\n      case 3: //audio ended\n        return 'idle';\n      default:\n        return 'idle';\n    }\n  }\n  render() {\n    return(\n      <button\n        id=\"btnAgent\"\n        className={\"button-agent status-\"+this.setButtonStatus(this.state.playStatus)}\n        onClick={this.props.handler}\n      >\n      </button>\n    );\n  }\n}\n\nclass TextSubtitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      displayMessage: 'dummy text'\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      displayMessage: props.displayMessage\n    };\n  }\n  render() {\n    return(\n      <p\n        id=\"txtSubtitle\"\n        className={\"theme-\"+this.state.theme}\n      >\n        {this.state.displayMessage}\n      </p>\n    );\n  }\n}\n\n/*\nclass AudioController extends React.Component {\n\n}\nclass AudioComp extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      name: props.name,\n      message: props.message,\n      displayMessage: props.displayMessage,\n      displayOnly: props.displayOnly,\n      hasImage: props.hasImage,\n      epd: props.epd,\n      answerEntity: props.answerEntity,\n      maxTimeout: props.maxTimeout,\n      duration: props.duration,\n      currentPlayTime: props.currentPlayTime,\n      playStatus: props.playStatus,\n      theme: props.theme\n    };\n  }\n  render() {\n    return(\n\n    );\n  }\n}\n*/\n\n/* * * * * * * * * * * * * * * *\n * BoxController and children  *\n * * * * * * * * * * * * * * * */\n\nclass BoxController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light'\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme\n    };\n  }\n  setTheme = () => {\n    this.setState({ theme: this.state.theme === 'light' ? 'dark' : 'light' });\n  }\n  render() {\n    return(\n      <div className=\"box-controller\">\n        <div className=\"box-bar\">\n          <div className={\"bar bar-base theme-\"+this.state.theme}\n          onClick={this.setTheme}></div>\n        </div>\n        <div className=\"box-buttons\">\n          <ButtonSmall name=\"btnRewind\" alignRight={false} theme={this.state.theme} />\n          <ButtonSmall name=\"btnSkip\" alignRight={false} theme={this.state.theme} />\n          <ButtonSmall name=\"btnExit\" alignRight={true} theme={this.state.theme} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ButtonSmall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      clicked: false\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      clicked: props.clicked\n    };\n  }\n  render() {\n    return (\n      <button\n        id={this.props.name}\n        className={\n          \"button-small theme-\"+\n          this.state.theme+\n          (this.props.alignRight ? ' align-right' : '')\n        }\n      >\n      </button>\n    );\n  }\n}\n\n\nfunction App() {\n  initAudio();\n  initData();\n  const element = <Baseplate\n    name={currentData.name}\n    message={currentData.message}\n    displayMessage={currentData.displayMessage}\n    displayOnly={currentData.displayOnly}\n    hasImage={currentData.hasImage}\n    epd={currentData.epd}\n    answerEntity={currentData.answerEntity}\n    maxTimeout={currentData.maxTimeout}\n  />;\n  return(element);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}