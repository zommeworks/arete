{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currentData","nextDataName","initData","docID","params","window","location","search","replace","str","key","value","getUrlParams","name","$","each","data","list","i","overwriteData","e","alert","getnextDataName","j","length","match","source","target","message","displayMessage","displayOnly","hasImage","epd","answerEntity","maxTimeout","Baseplate","props","state","voiceInput","elapsedTime","theme","playStatus","Sound","status","STOPPED","voiceInputHandler","bind","updateState","playSound","href","this","setState","console","log","setTimeout","clearInterval","timeoutCounter","PLAYING","limit","setInterval","stopAndSkip","id","React","Component","TTSComp","url","autoLoad","onLoad","onFinishedPlaying","BoxAgent","className","ButtonAgent","setButtonStatus","param","onClick","TextSubtitle","BoxImage","onError","src","alt","BoxController","setTheme","alignRight","ProgressBar","getWidth","style","width","ButtonSmall","clicked","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.aeaf1bd7.chunk.js","sourcesContent":["import React from 'react';\nimport Sound from 'react-sound'; //to install: npm install react-sound\nimport styles from './App.css';\nimport data from './testscript.json'\nimport $ from 'jquery';\n\n\n/*\n  UI scheme\n\n ┏━━━━ baseplate ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n ┃                                                 ┃\n ┃  ┏━━━━ TTSComp ━━━━━━━━━━━━━━━━━━━━━━━┓         ┃\n ┃  ┃  state: url (string)               ┃         ┃\n ┃  ┃         name (string)              ┃         ┃\n ┃  ┃         maxTimeout (int)           ┃         ┃\n ┃  ┃         voiceInput (0/1)           ┃         ┃\n ┃  ┃         playStatus (Sound.Status)  ┃         ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛         ┃\n ┃                                                 ┃\n ┃  ┏━━━━ BoxAgent ━━━━━━━━━━━━━━━━━━━━━━━━━━┓     ┃\n ┃  ┃  ┏━━━━ ButtonAgent ━━━━━━━━━━━━━━━━━┓  ┃     ┃\n ┃  ┃  ┃  state: voiceInput (0/1)         ┃  ┃     ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃     ┃\n ┃  ┃  ┏━━━━ TextSubtitle ━━━━━━━━━━━━━━━━┓  ┃     ┃\n ┃  ┃  ┃  state: theme (light / dark)     ┃  ┃     ┃\n ┃  ┃  ┃         displayMessage (string)  ┃  ┃     ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃     ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛     ┃\n ┃                                                 ┃\n ┃  ┏━━━━ BoxImage ━━━━━━━━━━━━━━━━━━━━━━━━━━┓     ┃\n ┃  ┃  (props:hasImage)                      ┃     ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛     ┃\n ┃                                                 ┃\n ┃  ┏━━━━ BoxController ━━━━━━━━━━━━━━━━━━━━━━━━┓  ┃\n ┃  ┃  state: theme (light / dark)              ┃  ┃\n ┃  ┃         voiceInput (0/1)                  ┃  ┃\n ┃  ┃  ┏━━━━ div.box-bar ━━━━━━━━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ ProgressBar ━━━━━━━━━━━━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: voiceInput (0/1)      ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         maxTimeout (int)      ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         elapsedTime (int)     ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ div.bar-base ━━━━━━━━━━━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┏━━━━ div.box-buttons ━━━━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnRewind ━━━━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnPlayPause ━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         voiceInput (0/1)      ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnSkip ━━━━━━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnExit ━━━━━━━━┓  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n**/\n\n\n\n/* * * * * * * * * * *\n * global variables  *\n * * * * * * * * * * */\n\nvar currentData = {};\nvar nextDataName = '';\n\n\n\n//functions\n\nfunction initData(){\n  try {\n    let docID = getUrlParams().name;\n    $.each(data.list, function(i){\n      if(data.list[i].name === docID){\n        overwriteData(data.list[i], currentData);\n      }\n    });\n  }\n  catch(e) {\n    alert('failed to load data');\n  }\n  nextDataName = getnextDataName();\n}\n\nfunction initNext() {\n  $.each(data.list, function(i){\n    if(data.list[i].name === nextDataName){\n      overwriteData(data.list[i], currentData);\n    }\n  });\n  nextDataName = getnextDataName();\n}\n\nfunction getnextDataName() {\n  let j;\n  for(let i = 0; i < data.list.length; i++){\n    if(data.list[i].name === currentData.name){\n      j = i+1;\n      break;\n    }\n  }\n  for(j; j < data.list.length; j++){\n    if(data.list[j].name.match(/(prompt|statement)/)) {\n      return data.list[j].name;\n      break;\n    }\n  }\n}\n\nfunction getUrlParams() {\n    var params = {};\n    window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str, key, value) { params[key] = value; });\n    return params;\n}\n\nfunction overwriteData(source, target) {\n  target.name = source.name;\n  target.message = source.message;\n  target.displayMessage = source.displayMessage;\n  target.displayOnly = source.displayOnly;\n  target.hasImage = source.hasImage;\n  target.epd = source.epd;\n  target.answerEntity = source.answerEntity;\n  target.maxTimeout = source.maxTimeout;\n}\n\nclass Baseplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      message: '',\n      displayMessage: '',\n      displayOnly: 0,\n      hasImage: 0,\n      epd: 0,\n      answerEntity: '',\n      maxTimeout: 0,\n      voiceInput: 0,\n      elapsedTime: 0,\n      theme: 'light',\n      playStatus: Sound.status.STOPPED\n    }\n    this.voiceInputHandler = this.voiceInputHandler.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.playSound = this.playSound.bind(this);\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      name: props.name,\n      message: props.message,\n      displayMessage: props.displayMessage,\n      displayOnly: props.displayOnly,\n      hasImage: props.hasImage,\n      epd: props.epd,\n      answerEntity: props.answerEntity,\n      maxTimeout: props.maxTimeout,\n    };\n  }\n  updateState() {\n    window.location.href = '?name=' + nextDataName;//\n    initNext();\n    this.setState({\n      name: currentData.name,\n      message: currentData.message,\n      displayMessage: currentData.displayMessage,\n      displayOnly: currentData.displayOnly,\n      hasImage: currentData.hasImage,\n      epd: currentData.epd,\n      answerEntity: currentData.answerEntity,\n      maxTimeout: currentData.maxTimeout,\n      voiceInput: 0,\n      elapsedTime: 0,\n      playStatus: Sound.status.STOPPED,\n    });\n    console.log('redirected to next script: '+window.location);\n  }\n  stopAndSkip() {\n    this.setState({\n      theme: 'light',\n      voiceInput: 0,\n    });\n    setTimeout(() => {\n      clearInterval(this.timeoutCounter);\n      this.updateState();\n    }, 500);//\n  }\n  playSound() {\n    this.setState({\n      playStatus: Sound.status.PLAYING\n    });\n  }\n  voiceInputHandler() {\n    //getting user turn\n    if(currentData.name.match(/(prompt|feedback)/)) {\n      if(this.state.voiceInput === 0) {\n        this.setState({\n          theme: 'dark',\n          voiceInput: 1,\n          playStatus: Sound.status.STOPPED\n        });\n        //start timeout counter\n        const limit = this.state.maxTimeout * 1000;\n        const frequency = 100;\n        var elapsedTime = 0;\n        this.timeoutCounter = setInterval(() => {\n          if(elapsedTime < limit) {\n            elapsedTime += frequency;\n            this.setState({ elapsedTime: elapsedTime/1000 });\n            console.log('listening: ',elapsedTime/1000);\n          }\n          else {\n            this.stopAndSkip();\n          }\n        }, frequency);\n      }\n    }\n    //pass to next target\n    else if(currentData.name.match(/statement/)) {\n      this.updateState();\n    }\n  }\n  render() {\n    return(\n      <div id=\"baseplate\">\n        <TTSComp\n          name={this.state.name}\n          maxTimeout={this.state.maxTimeout}\n          voiceInput={this.state.voiceInput}\n          voiceInputHandler={this.voiceInputHandler}\n          playStatus={this.state.playStatus}\n          playSound={this.playSound}\n        />\n        <BoxAgent\n          voiceInput={this.state.voiceInput}\n          theme={this.state.theme}\n          displayMessage={this.state.displayMessage}\n          voiceInputHandler={this.voiceInputHandler}\n        />\n        <BoxImage\n          name={this.state.name}\n          hasImage={this.state.hasImage}\n          theme={this.state.theme}\n        />\n        <BoxController\n          theme={this.state.theme}\n          maxTimeout={this.state.maxTimeout}\n          voiceInput={this.state.voiceInput}\n          elapsedTime={this.state.elapsedTime}\n          voiceInputHandler={this.voiceInputHandler}\n        />\n      </div>\n    );\n  }\n}\n\nclass TTSComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      voiceInput: 0,\n      playStatus: Sound.status.STOPPED,\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      url: 'tts/'+props.name+'.mp3',\n      name: props.name,\n      maxTimeout: props.maxTimeout,\n      voiceInput: props.voiceInput,\n      playStatus: props.playStatus,\n    };\n  }\n  render() {\n    return(\n      <Sound\n        url={this.state.url}\n        autoLoad={true}\n        onLoad={this.props.playSound}\n        playStatus={this.state.playStatus}\n        onFinishedPlaying={this.props.voiceInputHandler}\n      />\n    );\n  }\n}\n\n\n\n/* * * * * * * * * * * * *\n * BoxAgent and children *\n * * * * * * * * * * * * */\n\nclass BoxAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      voiceInput: 0,\n      theme: 'light',\n      displayMessage: \"dummy text\"\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      voiceInput: props.voiceInput,\n      theme: props.theme,\n      displayMessage: props.displayMessage\n    };\n  }\n  render() {\n    return(\n      <div className=\"box-agent\">\n        <ButtonAgent\n          voiceInput={this.state.voiceInput}\n          voiceInputHandler={this.props.voiceInputHandler}\n        />\n        <TextSubtitle theme={this.state.theme} displayMessage={this.state.displayMessage}/>\n      </div>\n    );\n  }\n}\n\nclass ButtonAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      voiceInput: 0,\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      voiceInput: props.voiceInput\n    };\n  }\n  setButtonStatus = (param) => {\n    switch(param) {\n      case 0:\n        return 'idle';\n      case 1:\n        return 'listening';\n      default:\n        return 'idle';\n    }\n  }\n  render() {\n    return(\n      <button\n        id=\"btnAgent\"\n        className={\"button-agent status-\"+this.setButtonStatus(this.state.voiceInput)}\n        onClick={this.props.voiceInputHandler}\n      >\n      </button>\n    );\n  }\n}\n\nclass TextSubtitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      displayMessage: 'dummy text'\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      displayMessage: props.displayMessage\n    };\n  }\n  render() {\n    return(\n      <p\n        id=\"txtSubtitle\"\n        className={\"theme-\"+this.state.theme}\n      >\n        {this.state.displayMessage}\n      </p>\n    );\n  }\n}\n\n\n\n\n/* * * * * * * * * * * * * * * *\n * Image If needed  *\n * * * * * * * * * * * * * * * */\n\nclass BoxImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      name: props.name,\n    };\n  }\n  onError = () => {\n    this.setState({\n      name: 'none',\n    });\n  }\n  render() {\n    return(\n      <div className={'box-image'}>\n        <img\n          className={'image theme-'+this.state.theme}\n          src={'./img/'+this.state.name+'.png'}\n          //src={'./img/TASK_J2_03_prompt_1.png'}\n          onError={this.onError}\n          alt={''}\n        ></img>\n      </div>\n    );\n  }\n}\n\n\n\n/* * * * * * * * * * * * * * * *\n * BoxController and children  *\n * * * * * * * * * * * * * * * */\n\nclass BoxController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light'\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme\n    };\n  }\n  setTheme = () => {\n    this.setState({ theme: this.state.theme === 'light' ? 'dark' : 'light' });\n  }\n  render() {\n    return(\n      <div className=\"box-controller\">\n        <div className=\"box-bar\">\n          <ProgressBar\n            voiceInput={this.state.voiceInput}\n            elapsedTime={this.props.elapsedTime}\n            maxTimeout={this.props.maxTimeout}\n          />\n          <div className={\"bar bar-base theme-\"+this.state.theme}\n          onClick={this.setTheme}></div>\n        </div>\n        <div className=\"box-buttons\">\n          <ButtonSmall\n            name=\"btnRewind\"\n            alignRight={false}\n            theme={this.state.theme}\n          />\n          <ButtonSmall name=\"btnSkip\" alignRight={false} theme={this.state.theme} />\n          <ButtonSmall name=\"btnExit\" alignRight={true} theme={this.state.theme} />\n        </div>\n      </div>\n    );\n  }\n}\nclass ProgressBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      voiceInput: 0\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      voiceInput: props.voiceInput,\n      elapsedTime: props.elapsedTime,\n    };\n  }\n  getWidth = () => {\n    let limit = this.props.maxTimeout;\n    let percentage = (this.state.elapsedTime / limit) * 100 + '%';\n    return percentage;\n  }\n  render() {\n    return (\n      <div\n        className={\"bar bar-progress\"}\n        style={{width: this.getWidth()}}\n      ></div>\n    );\n  }\n}\nclass ButtonSmall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      clicked: false\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      clicked: props.clicked\n    };\n  }\n  render() {\n    return (\n      <button\n        id={this.props.name}\n        className={\n          \"button-small theme-\"+\n          this.state.theme+\n          (this.props.alignRight ? ' align-right' : '')\n        }\n      >\n      </button>\n    );\n  }\n}\n\n\nfunction App() {\n  initData();\n  const element =\n    <Baseplate\n      name={currentData.name}\n      message={currentData.message}\n      displayMessage={currentData.displayMessage}\n      displayOnly={currentData.displayOnly}\n      hasImage={currentData.hasImage}\n      epd={currentData.epd}\n      answerEntity={currentData.answerEntity}\n      maxTimeout={currentData.maxTimeout}\n    />;\n  return(element);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}