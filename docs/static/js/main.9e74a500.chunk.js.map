{"version":3,"sources":["interaction.js","App.js","serviceWorker.js","index.js"],"names":["toggleAgent","target","$","hasClass","removeClass","addClass","filename","request","XMLHttpRequest","url","open","responseType","onload","context","decodeAudioData","response","buffer","ttsBuffer","onError","send","loadSound","source","createBufferSource","connect","destination","start","playSound","window","addEventListener","AudioContext","webkitAudioContext","e","alert","console","log","document","ready","click","testtest","Baseplate","props","state","currentData","handler","bind","playStatus","theme","this","setState","id","displayMessage","React","Component","name","message","displayOnly","hasImage","epd","answerEntity","maxTimeout","duration","currentPlayTime","BoxAgent","className","ButtonAgent","setButtonStatus","param","onClick","TextSubtitle","BoxController","setTheme","alignRight","ButtonSmall","clicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9e74a500.chunk.js","sourcesContent":["import $ from 'jquery';\n\nfunction testtest() {\n  console.log('hello');\n}\n\nfunction toggleAgent(target){\n    if($(target).hasClass('status-idle')){\n      $(target).removeClass('status-idle');\n      $(target).addClass('status-listening');\n      $('.theme-light').addClass('theme-dark');\n      $('.theme-light').removeClass('theme-light');\n      loadSound('sfx_listening');\n      playSound(ttsBuffer);\n    }\n    else if($(target).hasClass('status-listening')){\n      $(target).removeClass('status-listening');\n      $(target).addClass('status-idle');\n      $('.theme-dark').addClass('theme-light');\n      $('.theme-dark').removeClass('theme-dark');\n    }\n  }\n\n\n  /* web audio functions */\n  window.addEventListener('load', init, false);\n  function init() {\n    try {\n      // Fix up for prefixing\n      window.AudioContext = window.AudioContext||window.webkitAudioContext;\n      context = new AudioContext();\n    }\n    catch(e) {\n      alert('Web Audio API is not supported in this browser');\n    }\n  }\n  var ttsBuffer = null;\n  // Fix up prefixing\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n  var context = new AudioContext();\n\n  function loadSound(filename) {\n    var request = new XMLHttpRequest();\n    var url = '../src/sfx/'+filename+'.wav';\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    // Decode asynchronously\n    request.onload = function() {\n      context.decodeAudioData(request.response, function(buffer) {\n        ttsBuffer = buffer;\n      }, onError);\n    }\n    request.send();\n  }\n\n  function onError(e) {\n    console.log(\"error loading an audio file.\", e);\n  }\n\n  function playSound(buffer) {\n    var source = context.createBufferSource(); // creates a sound source\n    source.buffer = buffer;                    // tell the source which sound to play\n    source.connect(context.destination);       // connect the source to the context's destination (the speakers)\n    source.start(0);                           // play the source now\n                                               // note: on older systems, may have to use deprecated noteOn(time);\n  }\n\n\n  /* execution */\n  $(document).ready(function(){\n  });\n  $('#btnAgent').click(function(){\n    toggleAgent('#btnAgent');\n  });\n\n  export default testtest\n","import React from 'react';\nimport styles from './App.css';\nimport Interaction from './interaction.js';\n//import Testscript from './testscript'\n\n\n\n/*\n  UI scheme\n\n ┏━━━━ baseplate ━━━━┓\n ┃  ┏━━━━ AudioController ━━━━┓\n ┃  ┃\n ┃  ┗━━━━━━━━┛  ┃\n ┃  ┏━━━━ BoxAgent ━━━━━━━━━━━━━━━━━━━━━┓\n ┃  ┃  ┏━━━━ ButtonAgent ━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  props: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┃  state: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┃  ┏━━━━ TextSubtitle ━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  props: text (string)       ┃  ┃\n ┃  ┃  ┃         playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┃  state: playStatus (0/1/2)  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n ┃\n ┃  ┏━━━━ BoxController ━━━━━━━━━━━━━━━━━━━━━━━━┓\n ┃  ┃  props: theme (light / dark)              ┃\n ┃  ┃         playStatus (0/1/2)                ┃\n ┃  ┃  state: theme (light / dark)              ┃\n ┃  ┃         playStatus (0/1/2)                ┃\n ┃  ┃  ┏━━━━ div.box-bar ━━━━━━━━━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  ┏━━━━ ProgressBar ━━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┃         maxTimeout (int)      ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ div.bar-base ━━━━━━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┃  ┏━━━━ div.box-buttons ━━━━━━━━━━━━━━━━┓  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnRewind ━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnPlayPause ━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃         playStatus (0/1/2)    ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnSkip ━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┃  ┏━━━━ BtnSmall #btnExit ━━━━━━━━┓  ┃  ┃\n ┃  ┃  ┃  ┃  props: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┃  state: theme (light / dark)  ┃  ┃  ┃\n ┃  ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃  ┃\n ┃  ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┃\n ┃  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n\n props and states\n\n playStatus:\n  0: null,\n  1: audio ready,\n  2: playing,\n  3: audio end\n**/\n\nclass Baseplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = currentData;\n    this.handler = this.handler.bind(this);\n  }\n  static getDerivedStateFromProps(props, state) {\n    return currentData;\n  }\n  handler() {\n    if(currentData.playStatus === 2) {\n      currentData.playStatus = 3;\n      currentData.theme = 'light';\n    }\n    else {\n      currentData.playStatus = 2;\n      currentData.theme = 'dark';\n    }\n    this.setState(currentData);\n  }\n  render() {\n    return(\n      <div id=\"baseplate\">\n        <BoxAgent\n          playStatus={this.state.playStatus}\n          theme={this.state.theme}\n          displayMessage={this.state.displayMessage}\n          handler={this.handler}\n        />\n        <BoxController\n          theme={this.state.theme}\n          handler={this.handler}\n        />\n      </div>\n    );\n  }\n}\n\n\n\nconst currentData = {\n  name: '',\n  message: 'this is a dummy text',\n  displayMessage: 'dummy text',\n  displayOnly: 0,\n  hasImage: 0,\n  epd: 0,\n  answerEntity: '',\n  maxTimeout: 0,\n  duration: 0,\n  currentPlayTime: 0,\n  playStatus: 0,\n  theme: 'light',\n};\n\nclass AudioController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = currentData;\n  }\n  getData = () => {\n\n  }\n  /*\n  render() {\n    return(\n      true;\n    );\n  }\n  */\n}\n\n\n\n/* * * * * * * * * * * * *\n * BoxAgent and children *\n * * * * * * * * * * * * */\n\nclass BoxAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 0,\n      theme: 'light',\n      displayMessage: \"dummy text\"\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      playStatus: props.playStatus,\n      theme: props.theme,\n      displayMessage: props.displayMessage\n    };\n  }\n  render() {\n    return(\n      <div className=\"box-agent\">\n        <ButtonAgent\n          playStatus={this.state.playStatus}\n          handler={this.props.handler}\n        />\n        <TextSubtitle theme={this.state.theme} displayMessage={this.state.displayMessage}/>\n      </div>\n    );\n  }\n}\n\nclass ButtonAgent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 0\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      playStatus: props.playStatus\n    };\n  }\n  setButtonStatus = (param) => {\n    switch(param) {\n      case 0: //audio is not loaded\n        return 'idle';\n      case 1: //audio is ready\n        return 'idle';\n      case 2: //audio is playing\n        return 'listening';\n      case 3: //audio ended\n        return 'idle';\n      default:\n        return 'idle';\n    }\n  }\n  render() {\n    return(\n      <button\n        id=\"btnAgent\"\n        className={\"button-agent status-\"+this.setButtonStatus(this.state.playStatus)}\n        onClick={this.props.handler}\n      >\n      </button>\n    );\n  }\n}\nclass TextSubtitle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      displayMessage: \"dummy text\"\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      message: props.message\n    };\n  }\n  render() {\n    return(\n      <p\n        id=\"txtSubtitle\"\n        className={\"theme-\"+this.state.theme}\n      >\n        {this.state.displayMessage}\n      </p>\n    );\n  }\n}\n\n\n/* * * * * * * * * * * * * * * *\n * BoxController and children  *\n * * * * * * * * * * * * * * * */\n\nclass BoxController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light'\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme\n    };\n  }\n  setTheme = () => {\n    this.setState({ theme: this.state.theme == 'light' ? 'dark' : 'light' });\n  }\n  render() {\n    return(\n      <div className=\"box-controller\">\n        <div className=\"box-bar\">\n          <div className={\"bar bar-base theme-\"+this.state.theme}\n          onClick={this.setTheme}></div>\n        </div>\n        <div className=\"box-buttons\">\n          <ButtonSmall name=\"btnRewind\" alignRight={false} theme={this.state.theme} />\n          <ButtonSmall name=\"btnSkip\" alignRight={false} theme={this.state.theme} />\n          <ButtonSmall name=\"btnExit\" alignRight={true} theme={this.state.theme} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ButtonSmall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'light',\n      clicked: false\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    return {\n      theme: props.theme,\n      clicked: props.clicked\n    };\n  }\n  render() {\n    return (\n      <button\n        id={this.props.name}\n        className={\n          \"button-small theme-\"+\n          this.state.theme+\n          (this.props.alignRight ? ' align-right' : '')\n        }\n      >\n      </button>\n    );\n  }\n}\n\n\nfunction App() {\n  const element = <Baseplate\n    name={currentData.name}\n    message={currentData.message}\n    displayMessage={currentData.displayMessage}\n    displayOnly={currentData.displayOnly}\n    hasImage={currentData.hasImage}\n    epd={currentData.epd}\n    answerEntity={currentData.answerEntity}\n    maxTimeout={currentData.maxTimeout}\n    duration={currentData.duration}\n    currentPlayTime={currentData.currentPlayTime}\n    playStatus={currentData.playStatus}\n    theme={currentData.theme}\n  />;\n  return(element);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}